name: build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2.2.2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        python -m pip install poetry==1.5.1
      shell: bash

    - name: Verify Poetry Installation Path
      run: |
        which poetry || true
      shell: bash

    - name: Configure Poetry
      run: |
        python -m poetry config virtualenvs.in-project true
      shell: bash

    - name: Set up cache
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run style checks
      run: |
        make check-codestyle

    - name: Run tests
      run: |
        make test

    - name: Run safety checks
      run: |
        make check-safety

    - name: Build package
      run: |
        poetry build

    - name: Verify generated build package
      run: |
        python -m pip install twine
        for file in ./dist/*; do
          if [ -f "$file" ]; then
              twine check --strict "$file"
          fi
        done
      shell: bash
